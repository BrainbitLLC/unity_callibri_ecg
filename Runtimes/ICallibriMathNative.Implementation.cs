// <<This file was autogenerated by NativeLibSourceGenerator>>
// <<This file is not mean to be read by human>>
#if UNITY_IOS
#define __IOS__
#endif
using NativeLibSourceGeneratorShared;
using System;
using System.Runtime.InteropServices;

using System.IO;
using System.Reflection;

namespace Neurotech.CallibriUtils
{
    public sealed class CallibriMathNative
    {
        private static string GetApplicationRoot()
        {
            return Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
        }

        private static readonly Lazy<ICallibriMathNative> _api = new Lazy<ICallibriMathNative>(() =>
        {
            var platform = Platform.Type;
            try
            {
                switch (platform)
                {
                    case NativePlatformType.WinArm:
                    case NativePlatformType.WinArm64:
                    case NativePlatformType.WinX64:
                    case NativePlatformType.WinX86:
                        Environment.SetEnvironmentVariable("PATH", $"{ Path.Combine(GetApplicationRoot(), @"libs\windows") };{Environment.GetEnvironmentVariable("PATH")}"); // Not embed
                        break;
                    case NativePlatformType.LinuxArm:
                    case NativePlatformType.LinuxArm64:
                    case NativePlatformType.LinuxX64:
                    case NativePlatformType.LinuxX86:
                        Environment.SetEnvironmentVariable("PATH", $"{ Path.Combine(GetApplicationRoot(), @"libs\linux") };{Environment.GetEnvironmentVariable("PATH")}"); // Not embed
                        break;
                }
            }
            catch (Exception)
            {
                // ignore for IL2CPP
            }

            switch (platform)
            {
#if !__IOS__
                case NativePlatformType.WinArm:
                    return new WinArmImpl();
                case NativePlatformType.WinArm64:
                    return new WinArm64Impl();
                case NativePlatformType.WinX64:
                    return new WinX64Impl();
                case NativePlatformType.WinX86:
                    return new WinX86Impl();
                case NativePlatformType.AndroidARMv7:
                    return new AndroidARMv7Impl();
                case NativePlatformType.AndroidARMv8:
                    return new AndroidARMv8Impl();
                case NativePlatformType.AndroidX86:
                    return new AndroidX86Impl();
                case NativePlatformType.AndroidX64:
                    return new AndroidX64Impl();
                case NativePlatformType.OSX:
                    return new OSXImpl();
                case NativePlatformType.LinuxX64:
                    return new LinuxX64Impl();
                case NativePlatformType.LinuxX86:
                    return new LinuxX86Impl();
#endif
                case NativePlatformType.iOS:
#if __IOS__
                    return new iOSImpl();
#else
                    return new  DefaultImpl();
#endif
            }
            throw new NotSupportedException($"[OSDescription]:[{RuntimeInformation.OSDescription}]");
        });
        private CallibriMathNative() { }
        public static ICallibriMathNative Inst
        {
            get => _api.Value;
        }
    }
    
    public class DefaultImpl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return DefaultImpl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            DefaultImpl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            DefaultImpl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            DefaultImpl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            DefaultImpl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return DefaultImpl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return DefaultImpl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return DefaultImpl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return DefaultImpl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return DefaultImpl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return DefaultImpl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return DefaultImpl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            DefaultImpl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            DefaultImpl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            DefaultImpl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return DefaultImpl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            DefaultImpl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class WinX86Impl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return WinX86Impl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            WinX86Impl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            WinX86Impl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            WinX86Impl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            WinX86Impl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return WinX86Impl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return WinX86Impl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return WinX86Impl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return WinX86Impl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return WinX86Impl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return WinX86Impl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return WinX86Impl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            WinX86Impl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            WinX86Impl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            WinX86Impl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return WinX86Impl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            WinX86Impl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class WinX64Impl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return WinX64Impl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            WinX64Impl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            WinX64Impl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            WinX64Impl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            WinX64Impl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return WinX64Impl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return WinX64Impl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return WinX64Impl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return WinX64Impl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return WinX64Impl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return WinX64Impl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return WinX64Impl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            WinX64Impl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            WinX64Impl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            WinX64Impl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return WinX64Impl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            WinX64Impl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class WinArmImpl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return WinArmImpl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            WinArmImpl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            WinArmImpl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            WinArmImpl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            WinArmImpl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return WinArmImpl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return WinArmImpl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return WinArmImpl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return WinArmImpl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return WinArmImpl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return WinArmImpl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return WinArmImpl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            WinArmImpl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            WinArmImpl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            WinArmImpl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return WinArmImpl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            WinArmImpl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class WinArm64Impl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return WinArm64Impl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            WinArm64Impl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            WinArm64Impl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            WinArm64Impl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            WinArm64Impl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return WinArm64Impl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return WinArm64Impl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return WinArm64Impl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return WinArm64Impl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return WinArm64Impl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return WinArm64Impl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return WinArm64Impl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            WinArm64Impl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            WinArm64Impl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            WinArm64Impl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return WinArm64Impl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            WinArm64Impl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class iOSImpl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return iOSImpl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            iOSImpl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            iOSImpl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            iOSImpl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            iOSImpl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return iOSImpl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return iOSImpl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return iOSImpl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return iOSImpl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return iOSImpl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return iOSImpl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return iOSImpl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            iOSImpl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            iOSImpl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            iOSImpl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return iOSImpl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            iOSImpl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class AndroidARMv7Impl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return AndroidARMv7Impl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            AndroidARMv7Impl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            AndroidARMv7Impl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            AndroidARMv7Impl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            AndroidARMv7Impl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return AndroidARMv7Impl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return AndroidARMv7Impl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return AndroidARMv7Impl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return AndroidARMv7Impl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return AndroidARMv7Impl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return AndroidARMv7Impl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return AndroidARMv7Impl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            AndroidARMv7Impl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            AndroidARMv7Impl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            AndroidARMv7Impl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return AndroidARMv7Impl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            AndroidARMv7Impl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class AndroidARMv8Impl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return AndroidARMv8Impl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            AndroidARMv8Impl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            AndroidARMv8Impl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            AndroidARMv8Impl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            AndroidARMv8Impl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return AndroidARMv8Impl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return AndroidARMv8Impl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return AndroidARMv8Impl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return AndroidARMv8Impl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return AndroidARMv8Impl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return AndroidARMv8Impl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return AndroidARMv8Impl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            AndroidARMv8Impl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            AndroidARMv8Impl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            AndroidARMv8Impl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return AndroidARMv8Impl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            AndroidARMv8Impl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class AndroidX86Impl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return AndroidX86Impl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            AndroidX86Impl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            AndroidX86Impl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            AndroidX86Impl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            AndroidX86Impl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return AndroidX86Impl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return AndroidX86Impl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return AndroidX86Impl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return AndroidX86Impl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return AndroidX86Impl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return AndroidX86Impl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return AndroidX86Impl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            AndroidX86Impl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            AndroidX86Impl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            AndroidX86Impl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return AndroidX86Impl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            AndroidX86Impl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class AndroidX64Impl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return AndroidX64Impl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            AndroidX64Impl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            AndroidX64Impl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            AndroidX64Impl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            AndroidX64Impl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return AndroidX64Impl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return AndroidX64Impl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return AndroidX64Impl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return AndroidX64Impl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return AndroidX64Impl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return AndroidX64Impl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return AndroidX64Impl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            AndroidX64Impl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            AndroidX64Impl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            AndroidX64Impl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return AndroidX64Impl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            AndroidX64Impl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class OSXImpl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return OSXImpl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            OSXImpl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            OSXImpl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            OSXImpl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            OSXImpl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return OSXImpl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return OSXImpl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return OSXImpl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return OSXImpl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return OSXImpl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return OSXImpl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return OSXImpl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            OSXImpl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            OSXImpl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            OSXImpl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return OSXImpl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            OSXImpl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class LinuxX64Impl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return LinuxX64Impl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            LinuxX64Impl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            LinuxX64Impl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            LinuxX64Impl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            LinuxX64Impl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return LinuxX64Impl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return LinuxX64Impl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return LinuxX64Impl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return LinuxX64Impl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return LinuxX64Impl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return LinuxX64Impl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return LinuxX64Impl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            LinuxX64Impl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            LinuxX64Impl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            LinuxX64Impl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return LinuxX64Impl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            LinuxX64Impl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
    public class LinuxX86Impl : ICallibriMathNative
    {
        
        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createCallibriMathLib")]
        private static extern IntPtr n_createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index);
        public IntPtr createCallibriMathLib(int sampling_rate, int data_window, int nwins_for_pressure_index)
        { 
           return LinuxX86Impl.n_createCallibriMathLib( sampling_rate, data_window, nwins_for_pressure_index); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeCallibriMathLib")]
        private static extern void n_freeCallibriMathLib(IntPtr mathPtr);
        public void freeCallibriMathLib(IntPtr mathPtr)
        { 
            LinuxX86Impl.n_freeCallibriMathLib( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitFilter")]
        private static extern void n_CallibriMathLibInitFilter(IntPtr mathPtr);
        public void CallibriMathLibInitFilter(IntPtr mathPtr)
        { 
            LinuxX86Impl.n_CallibriMathLibInitFilter( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibPushData")]
        private static extern void n_CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount);
        public void CallibriMathLibPushData(IntPtr mathPtr, [In,Out] double[] samples, int samplesCount)
        { 
            LinuxX86Impl.n_CallibriMathLibPushData( mathPtr, samples, samplesCount); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibProcessDataArr")]
        private static extern void n_CallibriMathLibProcessDataArr(IntPtr mathPtr);
        public void CallibriMathLibProcessDataArr(IntPtr mathPtr)
        { 
            LinuxX86Impl.n_CallibriMathLibProcessDataArr( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetRR")]
        private static extern double n_CallibriMathLibGetRR(IntPtr mathPtr);
        public double CallibriMathLibGetRR(IntPtr mathPtr)
        { 
           return LinuxX86Impl.n_CallibriMathLibGetRR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetPressureIndex")]
        private static extern double n_CallibriMathLibGetPressureIndex(IntPtr mathPtr);
        public double CallibriMathLibGetPressureIndex(IntPtr mathPtr)
        { 
           return LinuxX86Impl.n_CallibriMathLibGetPressureIndex( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetHR")]
        private static extern double n_CallibriMathLibGetHR(IntPtr mathPtr);
        public double CallibriMathLibGetHR(IntPtr mathPtr)
        { 
           return LinuxX86Impl.n_CallibriMathLibGetHR( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetModa")]
        private static extern double n_CallibriMathLibGetModa(IntPtr mathPtr);
        public double CallibriMathLibGetModa(IntPtr mathPtr)
        { 
           return LinuxX86Impl.n_CallibriMathLibGetModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetAmplModa")]
        private static extern double n_CallibriMathLibGetAmplModa(IntPtr mathPtr);
        public double CallibriMathLibGetAmplModa(IntPtr mathPtr)
        { 
           return LinuxX86Impl.n_CallibriMathLibGetAmplModa( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibGetVariationDist")]
        private static extern double n_CallibriMathLibGetVariationDist(IntPtr mathPtr);
        public double CallibriMathLibGetVariationDist(IntPtr mathPtr)
        { 
           return LinuxX86Impl.n_CallibriMathLibGetVariationDist( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibInitialSignalCorrupted")]
        private static extern bool n_CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr);
        public bool CallibriMathLibInitialSignalCorrupted(IntPtr mathPtr)
        { 
           return LinuxX86Impl.n_CallibriMathLibInitialSignalCorrupted( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibResetDataProcess")]
        private static extern void n_CallibriMathLibResetDataProcess(IntPtr mathPtr);
        public void CallibriMathLibResetDataProcess(IntPtr mathPtr)
        { 
            LinuxX86Impl.n_CallibriMathLibResetDataProcess( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetRRchecked")]
        private static extern void n_CallibriMathLibSetRRchecked(IntPtr mathPtr);
        public void CallibriMathLibSetRRchecked(IntPtr mathPtr)
        { 
            LinuxX86Impl.n_CallibriMathLibSetRRchecked( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibSetPressureAverage")]
        private static extern void n_CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t);
        public void CallibriMathLibSetPressureAverage(IntPtr mathPtr, int t)
        { 
            LinuxX86Impl.n_CallibriMathLibSetPressureAverage( mathPtr, t); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibRRdetected")]
        private static extern bool n_CallibriMathLibRRdetected(IntPtr mathPtr);
        public bool CallibriMathLibRRdetected(IntPtr mathPtr)
        { 
           return LinuxX86Impl.n_CallibriMathLibRRdetected( mathPtr); 
        }

        [DllImport(CallibriUtilsLibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "CallibriMathLibClearData")]
        private static extern void n_CallibriMathLibClearData(IntPtr mathPtr);
        public void CallibriMathLibClearData(IntPtr mathPtr)
        { 
            LinuxX86Impl.n_CallibriMathLibClearData( mathPtr); 
        }
 
    }
}